// This file may be autogenerated, do not place meaningful code here.
// Use it only to define a list of nc-words (registers) that may appear
// in blocks of the nc-file.
namespace DotnetPostprocessing.Post
{
    ///<summary>A class that defines the nc-file - main output file that should be generated by the postprocessor.</summary>
    public partial class NCFile : TTextNCFile
    {
        ///<summary>The block of the nc-file is an ordered list of nc-words</summary>
        public NCBlock Block;
        ///<summary>Automatic block numbers counter</summary>
        public CountingNCWord BlockN = new CountingNCWord("{######}", 0, 1, 1);
        ///<summary>Movement type: L, CR or CP</summary>
        public TextNCWord MoveType = new TextNCWord("", "L", "", NCWordTextCase.Upper);
        ///<summary>X coordinate of the movement</summary>
        public NumericNCWord X = new NumericNCWord("X{+#####.###}", 0);
        ///<summary>Y coordinate of the movement</summary>
        public NumericNCWord Y = new NumericNCWord("Y{+#####.###}", 0);
        ///<summary>Z coordinate of the movement</summary>
        public NumericNCWord Z = new NumericNCWord("Z{+#####.###}", 0);
        ///<summary>A coordinate of the movement</summary>
        public NumericNCWord A = new NumericNCWord("A{+#####.###}", 0);
        ///<summary>B coordinate of the movement</summary>
        public NumericNCWord B = new NumericNCWord("B{+#####.###}", 0);
        ///<summary>C coordinate of the movement</summary>
        public NumericNCWord C = new NumericNCWord("C{+#####.###}", 0);
        ///<summary>Circle radius R</summary>
        public NumericNCWord R = new NumericNCWord("R{+#####.###}", 0);
        ///<summary>Just a number register to quick format any numbers before output</summary>
        public NumericNCWord Number = new NumericNCWord("{+#####.###}", 0);
        ///<summary>Circle direction: DR+, DR-</summary>
        public TextNCWord DR = new TextNCWord("DR", "+", "");
        ///<summary>Circle angle IPA</summary>
        public NumericNCWord IPA = new NumericNCWord("IPA{+#####.###}", 0);
        ///<summary>Circle delta Z (IZ)</summary>
        public NumericNCWord IZ = new NumericNCWord("IZ{+#####.###}", 0);
        ///<summary>Radius compensation: RR, RL or R0</summary>
        public TextNCWord RCompens = new TextNCWord("R", "0", "", NCWordTextCase.Upper);
        ///<summary>Feed value: FMAX or F200</summary>
        public TextNCWord Feed = new TextNCWord("F", "MAX", "", NCWordTextCase.Upper);
        ///<summary>S spindle speed</summary>
        public NumericNCWord S = new NumericNCWord("S{#####}", 0);
        ///<summary>Coolant M8 or M9</summary>
        public NumericNCWord MCoolant = new NumericNCWord("M{#}", 9);
        ///<summary>Spindle on-off: M3, M4 or M5</summary>
        public NumericNCWord MSpindle = new NumericNCWord("M{#}", 5);
        ///<summary>Modal cycle call: M99</summary>
        public NumericNCWord MCycleCall = new NumericNCWord("M{##}", 99);
        ///<summary>Physical motion: M91</summary>
        public NumericNCWord MPhysic = new NumericNCWord("M{##}", 91);
        ///<summary></summary>
        public NCBlock TextBlock;
        ///<summary>Text string to output simply with number</summary>
        public TextNCWord Text = new TextNCWord("", "", "", NCWordTextCase.Upper);
        public NCFile(): base()
        {
            Block = new NCBlock(
                  this, 
                  BlockN, 
                  MoveType,
                  X, 
                  Y, 
                  Z,
                  A,
                  B,
                  C,
                  R,
                  IPA, 
                  IZ,
                  DR,
                  RCompens,
                  Feed,
                  S,
                  MCoolant,
                  MSpindle,
                  MCycleCall,
                  MPhysic);
            TextBlock = new NCBlock(
                      this, 
                      BlockN, 
                      Text);
            OnInit();
        }
    }
}
